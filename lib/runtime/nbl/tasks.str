module runtime/nbl/tasks

imports 
  
  runtime/task/core
  runtime/task/tasks
  runtime/nbl/lookup
  runtime/nbl/collect
  runtime/nbl/query
  runtime/nbl/incremental
  runtime/nbl/interface
  runtime/nbl/uri
  runtime/nbl/utils
  runtime/nbl/entries
  
signature
  
  constructors
    
    ResolveDefs            : Scope * Namespace * Name                  -> Instruction
    DisambiguateDefs       : List(Def) * List(Prop) * Namespace * Name -> Instruction
    ResolveNamedImports    : Scope * Namespace * Name                  -> Instruction
    ImportCalc             : URI                                       -> Instruction
    ImportClosure          : URI                                       -> Instruction
    PropConstraint         : Kind * Expected * Result                  -> Instruction
        
    ResolveAllDefs         : Scope * Namespace                  -> Instruction
        
rules // Resolve
  
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveDefs(scope, ns, name) -> def*
  	where
  		uri   := <nabl-uri> scope;
  		name' := <try-remove-list; strip-annos> name; // TODO: can this be a list?
  		<nabl-add-name-read(|nr, ns, name')> uri;
  		def*  := <nabl-lookup(|ns, name')> uri;
  		not(?[])

	// Calls a user-defined disambiguation filter on definitions with relevant information.
	perform-task(|nr):
		DisambiguateDefs(def*, prop*, namespace, name) -> result
		where
			if <Tl> def* then
				<try(nabl-disambiguate(|prop*, namespace, name))> def*
			else
				!def*
			end => result;
			not(?[])

	task-is-combinator = ?DisambiguateDefs(_, _, _, _)

	// Looks up named imports, active in scopes with namespace and name..
	perform-task(|nr):
		ResolveNamedImports(scope, ns, name) -> result
		where
			uri     := <nabl-uri> scope;
			<nabl-add-uri-read(|nr)> uri;
			name'   := <try-remove-list; strip-annos> name; // TODO: can this be a list?
			import* := <nabl-lookup-named-import(|ns, name')> uri;
      switch id
      	case ?[]                            : fail
      	case task-collect-dependencies => d : !d
      	otherwise                           : id
      end => result

rules // Visibility
	
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveAllDefs(scope, ns) -> def*
  	where
  		uri  := <nabl-uri> scope;
  		<nabl-add-ns-read(|nr, ns)> uri;
  		def* := <nabl-lookup-all(|ns)> uri;
  		not(?[])

	nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range):
		uri -> [task|subtasks]
		with
			task := <nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range)> uri;
      switch !range
      	case One(): ![]
      	case All(): <nabl-uri-parent < nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range) + ![]> uri
    	end => subtasks
		
	nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range):
		uri -> filtered
		with
			def-task := <new-task(|partition)> ResolveAllDefs(<nabl-use-subtask-uri(|partition)> uri, ns);
      filtered  := <nabl-use-propconstraint(|partition)> (def-task, prop*)

rules // Property constraint
	
	perform-task(|nr):
		PropConstraint(kind, expected, definition) -> result
		where
    	uri    := <nabl-uri> definition;
      value  := <nabl-get-property(|kind)> uri;
      value' := <insert-results-or-create-dependency> value;
      switch id
      	case task-collect-dependencies => d : !d
      	otherwise                           : (<nabl-property-eq(|kind) <+ eq> (expected, value'); !definition) <+ 
                                              (<nabl-property-eq(|kind) <+ eq> (expected, <try-remove-list> value'); !definition)
      end => result

