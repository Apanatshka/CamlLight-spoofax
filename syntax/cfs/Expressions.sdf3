module cfs/Expressions

imports
	lex/Identifier
	lex/Number
	lex/Text
	cfs/Names
	cfs/Values
	cfs/Types
	cfs/Patterns

context-free start-symbols
	Expr
	SimpleMatching
	MultipleMatching
	LetBinding

template options
	keyword -/- [A-Za-z0-9]

templates
	ExprRecordBinding.ExprRecordB = [[GLOBALNAME] = [RecordBExpr]]
	
	Expr = [[SimpleExpr]]
	Expr = [[TupleExpr]]
	Expr = [[ExprSequence]]
	Expr = [[StructEqExpr]]
	
	TupleSubExpr = [[SimpleExpr]]
	TupleSubExpr = [[ExprSequence]]
	TupleSubExpr = [[StructEqExpr]]
	
	NonSemicolonExpr = [[SimpleExpr]]
	NonSemicolonExpr = [[TupleExpr]]
	NonSemicolonExpr = [[StructEqExpr]]
	
	RecordBExpr = [[SimpleExpr]]
	RecordBExpr = [[TupleExpr]]
	
	//this is probably a mistake in the manual because it isn't explained and it's ambiguous with Variable
	// SimpleExpr.Ident               = [[IDENT]]
	//prefer variable over constant because a constant with a name can probably be resolved as a variable? (only if same namespaces)
	SimpleExpr.VarExpr   = [[Variable]] {prefer}
	SimpleExpr.ConstExpr = [[Constant]]
	SimpleExpr           = [([Expr])] {bracket}
	SimpleExpr           = [begin [Expr] end] {bracket}
	SimpleExpr.HasType   = [([Expr]: [TypeExpr])]
	TupleExpr.TupleExpr  = [[SimpleExpr+; separator=", "]] {avoid} // both avoid here and the reject below are required
	TupleExpr.TupleExpr  = [[SimpleExpr]] {reject}
	//ambiguous with function application, and not really different (? perhaps not if different namespaces)
	// SimpleExpr.ConstructorExpr     = [[NCConstr] [Expr]]
	SimpleExpr.ListLit      = <[<NonSemicolonExpr+; separator="; ">]>
	SimpleExpr.ArrayLit     = <[|<NonSemicolonExpr+; separator="; ">|]>
	SimpleExpr.RecordExpr   = [{[ExprRecordBinding+; separator="; "]}]
	SimpleExpr.FuncApp      = [[Expr] [Expr]] {left}
	SimpleExpr.RecordAccess = [[Expr].[GLOBALNAME]]
	// <- may be read as LessThan(Negate(...)), hence the prefer
	SimpleExpr.RecordAssign = [[Expr].[GLOBALNAME] <- [Expr]] {right, prefer}
	SimpleExpr.ArrayAccess  = [[Expr].([Expr])]
	// <- may be read as LessThan(Negate(...)), hence the prefer
	SimpleExpr.ArrayAssign  = [[Expr].([Expr]) <- [Expr]] {right, prefer}
	// prefer so the dangling else is associated with the last if
	SimpleExpr.IfExpr       = [if [Expr] then [Expr]] {prefer}
	SimpleExpr.IfExpr       = [if [Expr] then [Expr] else [Expr]]
	SimpleExpr.WhileExpr    = [while [Expr] do [Expr] done]
	SimpleExpr.ForExpr      = [for [IDENT] = [Expr] to [Expr] do [Expr] done]
	SimpleExpr.ForExpr      = [for [IDENT] = [Expr] downto [Expr] do [Expr] done]
	SimpleExpr.MatchExpr    = [match [Expr] with [SimpleMatching]]
	SimpleExpr.FuncDef      = [fun [MultipleMatching]]
	SimpleExpr.FuncDef      = [function [SimpleMatching]]
	SimpleExpr.TryExpr      = [try [Expr] with [SimpleMatching]]
	SimpleExpr.LetExpr      = [let [LetBinding+; separator="\nand "] in [Expr]]
	SimpleExpr.LetRecExpr   = [let rec [LetBinding+; separator="\nand "] in [Expr]]
	
	OneMatching.OneMatching           = [[Pattern] -> [Expr]]
	MultiMatching.MultiMatching       = [[Pattern+] -> [Expr]]
	SimpleMatching.SimpleMatching     = [[OneMatching+; separator="\n| "]]
	MultipleMatching.MultipleMatching = [[MultiMatching+; separator="\n| "]]
	LetBinding.LetB                   = [[Pattern] = [Expr]]
	// prefer over the above let binding with a ConstrPattern 
	LetBinding.LetB                   = [[Variable] [Pattern+] = [Expr]] {prefer}
	
	// avoid in favour of negative integer literals
	SimpleExpr.Negate        = [-[Expr]] {avoid}
	SimpleExpr.FloatNegate   = [-.[Expr]]
	SimpleExpr.Dereference   = [![Expr]]
	
	SimpleExpr.ConsExpr       = [[Expr] :: [Expr]]{right}
	SimpleExpr.LogicalAnd     = [[Expr] & [Expr]] {left}
	SimpleExpr.LogicalOr      = [[Expr] or [Expr]] {left}
	ExprSequence.ExprSequence = [[Expr]; [Expr]] {right}

	SimpleExpr.Add           = [[Expr] + [Expr]] {left}
	// prefer over function application of negative number
	SimpleExpr.Subtract      = [[Expr] - [Expr]] {left, prefer}
	SimpleExpr.Multiply      = [[Expr] * [Expr]] {left}
	SimpleExpr.Division      = [[Expr] / [Expr]] {left}
	SimpleExpr.Modulo        = [[Expr] mod [Expr]] {left}
	SimpleExpr.FloatAdd      = [[Expr] +. [Expr]] {left}
	// prefer over function application of float negative number
	SimpleExpr.FloatSubtract = [[Expr] -. [Expr]] {left, prefer}
	SimpleExpr.FloatMultiply = [[Expr] *. [Expr]] {left}
	SimpleExpr.FloatDivision = [[Expr] /. [Expr]] {left}
	SimpleExpr.FloatPowerOf  = [[Expr] ** [Expr]] {right}
	SimpleExpr.ListConcat    = [[Expr] @ [Expr]] {right}
	SimpleExpr.StringConcat  = [[Expr] ^ [Expr]] {right}
	//this one isn't explained in the manual!
	//SimpleExpr.UndefinedOperator = [[Expr] ! [Expr]]
	SimpleExpr.ReferenceAssign   = [[Expr] := [Expr]] {right}
	
	//avoid because = is also used in let and record bindings
	StructEqExpr.StructuralEquals     = [[Expr] = [Expr]] {left, avoid}
	SimpleExpr.StructuralInequals     = [[Expr] <> [Expr]] {left}
	SimpleExpr.PhysicalEquals         = [[Expr] == [Expr]] {left}  
	SimpleExpr.PhysicalInequals       = [[Expr] != [Expr]] {left}  
	SimpleExpr.LessThan               = [[Expr] < [Expr]] {left}
	SimpleExpr.LessThanEquals         = [[Expr] <= [Expr]] {left}
	SimpleExpr.GreaterThan            = [[Expr] > [Expr]] {left}
	SimpleExpr.GreaterThanEquals      = [[Expr] >= [Expr]] {left}
	SimpleExpr.FloatLessThan          = [[Expr] <. [Expr]] {left} 
	SimpleExpr.FloatLessThanEquals    = [[Expr] <=. [Expr]] {left}
	SimpleExpr.FloatGreaterThan       = [[Expr] >. [Expr]] {left} 
	SimpleExpr.FloatGreaterThanEquals = [[Expr] >=. [Expr]] {left}

context-free priorities
	SimpleExpr.Dereference > {
		SimpleExpr.RecordAccess
		SimpleExpr.ArrayAccess
	} >
	SimpleExpr.FuncApp > {
		SimpleExpr.Negate
		SimpleExpr.FloatNegate
	} >
	SimpleExpr.FloatPowerOf >
	SimpleExpr.Modulo > {
		SimpleExpr.Multiply
		SimpleExpr.FloatMultiply
		SimpleExpr.Division
		SimpleExpr.FloatDivision
	} > {
		SimpleExpr.Add
		SimpleExpr.FloatAdd
		SimpleExpr.Subtract
		SimpleExpr.FloatSubtract
	} >
	SimpleExpr.ConsExpr > {
		SimpleExpr.ListConcat
		SimpleExpr.StringConcat
	} > {
		StructEqExpr.StructuralEquals   
		SimpleExpr.StructuralInequals 
		SimpleExpr.PhysicalEquals     
		SimpleExpr.PhysicalInequals   
		SimpleExpr.LessThan           
		SimpleExpr.LessThanEquals   
		SimpleExpr.GreaterThan        
		SimpleExpr.GreaterThanEquals
		SimpleExpr.FloatLessThan      
		SimpleExpr.FloatLessThanEquals   
		SimpleExpr.FloatGreaterThan        
		SimpleExpr.FloatGreaterThanEquals
	} >
	//TODO: find out where the not is that the manual names in the table...
	// SimpleExpr.Not >
	SimpleExpr.LogicalAnd >
	SimpleExpr.LogicalOr >
	TupleExpr.TupleExpr > {
		SimpleExpr.RecordAssign
		SimpleExpr.ArrayAssign
		SimpleExpr.ReferenceAssign
	} >
	SimpleExpr.IfExpr >
	ExprSequence.ExprSequence > {
		SimpleExpr.LetExpr     
		SimpleExpr.LetRecExpr  
		SimpleExpr.MatchExpr   
		SimpleExpr.FuncDef 
		SimpleExpr.TryExpr     
	}