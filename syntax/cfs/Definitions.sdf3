module cfs/Definitions

imports
	lex/Identifier
	cfs/Types
	cfs/Expressions

context-free start-symbols
	TypeDef
	TypeDefPart
	TypeParams
	ConstrDecl
	LabelDecl
	ExceptionDef
	ValueDef
	ValueDecl

template options
	keyword -/- [A-Za-z0-9]

templates
	TypeDef.TypeDef = [type [TypeDefPart+; separator="and"]]
	
	TypeDefPart.ADTDef       = [[TypeParams?] [IDENT] = [ConstrDecl+; separator="|"]]
	TypeDefPart.LabelDef     = [[TypeParams?] [IDENT] = {[LabelDecl+; separator=";"]}]
	TypeDefPart.TypeAlias    = [[TypeParams?] [IDENT] == [TypeExpr]]
	TypeDefPart.AbstrType    = [[TypeParams?] [IDENT]]
	TypeDefPart.MutAbstrType = [[TypeParams?] [IDENT] mutable]
	
	TypeParams.TypeVar = [[TYPEVARIABLE]]
	TypeParams.TypeVar = [([TYPEVARIABLE+; separator=","])]
	
	ConstrDecl.CConstrDecl  = [[IDENT]]
	ConstrDecl.NCConstrDecl = [[IDENT] of [TypeExpr]]
	
	LabelDecl.LabelDecl    = [[IDENT] : [TypeExpr]]
	LabelDecl.MutLabelDecl = [mutable [IDENT] : [TypeExpr]]
	
	ExceptionDef.ExcDef = [exception [ConstrDecl+; separator="and"]]
	
	ValueDef.ValueDef    = [let [LetBinding+; separator="and"]]
	ValueDef.RecValueDef = [let rec [LetBinding+; separator="and"]]
	
	ValueDecl.ValueDecl = [value [ValueDeclPart+; separator="and"]]
	
	ValueDeclPart.TypeBinding = [[IDENT] : [TypeExpr]]