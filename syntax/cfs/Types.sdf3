module cfs/Types

imports
	lex/Identifier

context-free start-symbols
	TypeExpr
	TYPEVARIABLE

lexical syntax
	TYPEVARIABLE = [\'] IDENT

templates
	TypeExpr        = [[SimpleTypeExpr]]
	TypeExpr        = [[TupleTypeExpr]]
		
	SimpleTypeExpr.TypeVariable = [[TYPEVARIABLE]]
	SimpleTypeExpr              = [([TypeExpr])] {bracket}
	SimpleTypeExpr.FuncType     = [[TypeExpr] -> [TypeExpr]] {right}
	TupleTypeExpr.TupleType     = [[SimpleTypeExpr+; separator=" * "]] {avoid} // both avoid here and the reject below are required
	TupleTypeExpr.TupleType     = [[SimpleTypeExpr]] {reject}
	SimpleTypeExpr.ConstrType   = [[GLOBALNAME]]
	// prefer this rule over the one below when parens are used but only one TypeExpr is inside
	SimpleTypeExpr.ConstrType   = [[TypeExpr] [GLOBALNAME]]
	SimpleTypeExpr.ConstrType   = [([TypeExpr+; separator=","]) [GLOBALNAME]] {avoid}

context-free priorities
	SimpleTypeExpr.ConstrType >
	TupleTypeExpr.TupleType   >
	SimpleTypeExpr.FuncType