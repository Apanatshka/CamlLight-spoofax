module cfs/Types

imports
	lex/Identifier

context-free start-symbols
	TypeExpr

lexical syntax
	TYPEVARIABLE = "'" IDENT

templates
	TypeExpr.TypeVariable = [[TYPEVARIABLE]]
	TypeExpr              = [([TypeExpr])] {bracket}
	TypeExpr.FunctionType = [[TypeExpr] -> [TypeExpr]] {right}
	TypeExpr.TupleType    = [[TypeExpr] * [TypeExpr]] {right}
	TypeExpr.ConstrType   = [[GLOBALNAME]] 
	TypeExpr.ConstrType   = [[TypeExpr] [GLOBALNAME]] {prefer}
	// prefer the above rule the one below when parens are used but only one TypeExpr is inside
	TypeExpr.ConstrType   = [([TypeExpr+; separator=","]) [GLOBALNAME]]

context-free priorities
	TypeExpr.ConstrType   >
	TypeExpr.TupleType    >
	TypeExpr.FunctionType