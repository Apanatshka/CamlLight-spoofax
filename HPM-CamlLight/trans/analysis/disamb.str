module trans/analysis/disamb

imports
  include/CamlLight
  runtime/nabl/-
  trans/analysis/names
  trans/extra-constructors

// Code to disambiguate the purposely ambiguous grammar using information from the name analysis

rules
	
  disamb: amb(l@[CConstr(_), Var(_)]) -> <disamb> amb(<reverse> l)
  disamb: amb([v@Var(vn), c@CConstr(cn)]) -> res
  with if <nabl-uri;nabl-uri-namespace> cn
         then res := c
         else res := v
       end
  
  disamb: amb(l@[CConstr(_), PatternVar(_)]) -> <disamb> amb(<reverse> l)
  disamb: amb([v@PatternVar(vn), c@CConstr(cn)]) -> res
  with if <nabl-uri;nabl-uri-namespace> cn
         then res := c
         else res := v
       end
  
  // how is it going to be useful to discriminate function and constructor applications?
  disamb: amb(l@[ConstrApp(_,_), FuncApp(_,_)]) -> <disamb> amb(<reverse> l)
  disamb: amb([fa@FuncApp(f, farg), ca@ConstrApp(c, carg)]) -> res
  with if <?NCConstr(cn)> f; <nabl-uri;nabl-uri-namespace> cn
         then res := ca
         else res := fa
       end
  
  // These rule are the same as the above, but for the case where the FuncApp vs. ConstrApp is deeply nested 
  disamb: amb([f1@FuncApp(_,_), f2@FuncApp(_,_)]) -> f2
  where cn := <collect(?ConstrApp(_,_));getfirst(?ConstrApp(NCConstr(<id>),_))> f1
      ; <not(nabl-uri;nabl-uri-namespace)> cn
  disamb: amb([f1@FuncApp(_,_), f2@FuncApp(_,_)]) -> f1
  where cn := <collect(?ConstrApp(_,_));getfirst(?ConstrApp(NCConstr(<id>),_))> f2
      ; <not(nabl-uri;nabl-uri-namespace)> cn
        
  disamb: amb([f1@ConstrApp(_,_), f2@ConstrApp(_,_)]) -> f2
  where cn := <collect(?ConstrApp(_,_));getfirst(?ConstrApp(NCConstr(<id>),_))> f1
      ; <not(nabl-uri;nabl-uri-namespace)> cn
  disamb: amb([f1@ConstrApp(_,_), f2@ConstrApp(_,_)]) -> f1
  where cn := <collect(?ConstrApp(_,_));getfirst(?ConstrApp(NCConstr(<id>),_))> f2
      ; <not(nabl-uri;nabl-uri-namespace)> cn
  
  disamb: amb([cl, l]) -> l
  where cn := <getfirst(?ConstrPattern(NCConstr(<id>),_))> cl
      ; <not(nabl-uri;nabl-uri-namespace)> cn
  disamb: amb([l, cl]) -> l
  where cn := <getfirst(?ConstrPattern(NCConstr(<id>),_))> cl
      ; <not(nabl-uri;nabl-uri-namespace)> cn
  
  // remove nested lists that may be left behind after clearing the amb()
  post-disamb1 = GlobalFunDef(id,flatten-list,id)
              + LocalFunDef(id,flatten-list,id)
              + GlobalRecFunDef(id,flatten-list,id)
              + LocalRecFunDef(id,flatten-list,id)
              
  // TODO: move post-disamb2 to desugar.str under the name post-disamb-desugar
  // functions to simple llambda's
  post-disamb2: FunDef(multimatch*) -> FunctionDef(simplematch*)
    where simplematch* := <map(post-disamb2-helper)> multimatch*
  post-disamb2-helper: ([a], e)       -> SimpleMatch(a, e)
  post-disamb2-helper: c#([[h|t], e]) -> SimpleMatch(h, FunctionDef([<post-disamb2-helper> (t, e)]))
    where <not(?[])> t ; <?"MultiMatch" + ?""> c
  
  post-disamb2: GlobalFunDef(name, p*, e)    -> GlobalValDef(name,    <post-disamb2> FunDef([MultiMatch(p*, e)]))
  post-disamb2: GlobalRecFunDef(name, p*, e) -> GlobalRecValDef(name, <post-disamb2> FunDef([MultiMatch(p*, e)]))
  post-disamb2: LocalFunDef(name, p*, e)     -> LocalValDef(name,     <post-disamb2> FunDef([MultiMatch(p*, e)]))
  post-disamb2: LocalRecFunDef(name, p*, e)  -> LocalRecValDef(name,  <post-disamb2> FunDef([MultiMatch(p*, e)]))
  
  disamb-all = bottomup(try(disamb));topdown(try(post-disamb1);try(post-disamb2))
             ; not(getfirst(?amb(_))) // safety check that all amb() are removed
