module analysis/solve-constraints

imports
  include/CamlLight
  extra-constructors
  
  lib/runtime/nabl/-
  
  trans/analysis/constraints

strategies
  remove-aliases: (n, l) -> (n', l'')
    where (alias,l')  := <partition({\CEq(a@TypeVar(_), b@TypeVar(_))->(a,b)\})> l
        ; l'' := <foldl({\((a,b),l) -> <map(alltd(?a;!b))> l\})> (alias,l')
        ; n'  := <foldl({\((a,b),l) -> <map(alltd(?a;!b))> l\})> (alias,n)
  
  solve-constraints = fixpoint(remove-aliases;fuse-constraints;expand-constraints)
                    ; ?(n,l)
                    ; <map((try(nabl-uri-name),alltd(solve-constraints-helper(|<map({\CEq(a,b) -> (a,b)\})>l))))> n
  solve-constraints-helper(|l): tv@TypeVar(_) -> <lookup> (tv,l)

  fuse-constraints: (n,c) -> (n,<foldl(fuse-constraints-helper <+ Snd)> (c',c'))
    where c' := <map(typevar-first)> c
  
  fuse-constraints-helper: (CEq(tv@TypeVar(_),_),l) -> res
    where (eqs,rest) := <partition(?CEq(tv,_) + ?CEq(_,tv))> l
        ; <min-length(|2)> eqs
        ; res := <conc> (<mapconcat(get-arguments)
                         ;filter(not(?tv))
                         ;multi-eq-to-eq(mkCEq)> eqs, rest)
  
  expand-constraints = (id,mapconcat(expand-constraint))
  
  expand-constraint: CEq(TypeVar(_),_)                          -> [<id>]
  expand-constraint: CEq(FuncType(a1,b1),FuncType(a2,b2))       -> [CEq(a1,a2), CEq(b1,b2)]
  expand-constraint: CEq(TupleType(l1),TupleType(l2))           -> <zip(mkCEq)> (l1,l2)
  expand-constraint: CEq(ConstrType(p1, n),ConstrType(p2, n))   -> [<mkCEq> (p1,p2)]
  expand-constraint: CEq(None(),None())                         -> []
  expand-constraint: CEq(TypeExprParams(l1),TypeExprParams(l2)) -> <zip(mkCEq)> (l1,l2)
  
  
  expand-constraint: CEq(ConstrType(_, n),ConstrType(_, n')) ->
    <print-failure(|$[Failed to match [n] with [n']: ])> where <not(?n)> n'
  