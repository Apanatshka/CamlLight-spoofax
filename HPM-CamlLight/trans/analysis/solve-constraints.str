module analysis/solve-constraints

imports
  include/CamlLight
  extra-constructors
  
  lib/runtime/nabl/-
  
  trans/analysis/constraints

strategies
  // solve-constraints : [(name, TypeExpr, [(name, TypeExpr)], [Constraint])] -> [(name, TypeExpr)]
  // solve the given constraints, where the input is a list with
  // 1 a name,
  // 2 its type (variable),
  // 4(!) the constraints on that type
  // 3 the existentially quantified names used in those constraints
  // each of these names is universally quantified and maybe be referenced in a CRefEq in any of the constraints of that or other names. 
  solve-constraints =
    insert-existentials
  ; start-name-logging
  ; sc-done( solve-constraints'
           , ref-resolve(solve-constraints')
           , mono-rec(ref-resolve(solve-constraints'))
           , ref-resolve2(mono-rec(ref-resolve(solve-constraints')))
           , sc-fail)
  // check if done, then prettify, else continue
  sc-done(cont) = (map(binding-solved), id) < prettify-result + cont
  // same as sc-done but saves subresults in a list
  sc-done-list(cont) = (map(binding-solved), id) < \i -> [i , <prettify-result> i]\ + \i -> [i | <cont> i]\
  // a way to end the type inference with an error
  sc-fail = where(<print-failure(|"Type inference failed. ")> "")
  // same as sc-fail but for sc-done-list
  sc-fail-list: a -> [a]
    where <print-failure(|"Type inference failed. ")> ""
  
  // higher arity version of sc-done(-list)
  sc-done(c1,c2) = sc-done(c1;sc-done(c2))
  sc-done(c1,c2,c3) = sc-done(c1;sc-done(c2,c3))
  sc-done(c1,c2,c3,c4) = sc-done(c1;sc-done(c2,c3,c4))
  sc-done(c1,c2,c3,c4,c5) = sc-done(c1;sc-done(c2,c3,c4,c5))
  sc-done(c1,c2,c3,c4,c5,c6) = sc-done(c1;sc-done(c2,c3,c4,c6))
  sc-done(c1,c2,c3,c4,c5,c6,c7) = sc-done(c1;sc-done(c2,c3,c4,c6,c7))
  
  sc-done-list(c1,c2) = sc-done-list(c1;sc-done-list(c2))
  sc-done-list(c1,c2,c3) = sc-done-list(c1;sc-done-list(c2,c3))
  sc-done-list(c1,c2,c3,c4) = sc-done-list(c1;sc-done-list(c2,c3,c4))
  sc-done-list(c1,c2,c3,c4,c5) = sc-done-list(c1;sc-done-list(c2,c3,c4,c5))
  sc-done-list(c1,c2,c3,c4,c5,c6) = sc-done-list(c1;sc-done-list(c2,c3,c4,c6))
  sc-done-list(c1,c2,c3,c4,c5,c6,c7) = sc-done-list(c1;sc-done-list(c2,c3,c4,c6,c7))
  
  // start-name-logging : [(name, TypeExpr, [Constraint])] -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  start-name-logging = !(<id>, (<foldl(snl-helper)> (<id>, []), []))
  snl-helper : ((name, te, c),l) -> <conc> (l,[CRefEq(name, te){c*} | c])
    where let s(|i) = !i in c* := [Anno("constraints",<nmap(s|<length;inc;inc>l)> c)] end
  
  // solve-constraints' : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // solves constraints by:
  // 1 removing aliases (CEq(TypeVar(alias), TypeVar(replacement)))
  // 2 fusing constraints (CEq(TypeVar(a), b) /\ CEq(TypeVar(a), c) --> CEq(b,c))
  // 3 expanding constraints (by unifying two Equivalent ASTs up to TypeVars)
  // 4 Doing the above steps in a fixpoint
  // 5 Fill in the fully concrete types of bindings (replace CRefEq(id,te) for each (id, concrete-type-here, _) in the list)
  // 6 Removing any surplus constraints after doing the filling in
  solve-constraints' = thread-map( fixpoint( where(?((_,<debug(|"solve-constraints'.start: ")>,_),_));remove-aliases
                                           ; where(?((_,<debug(|"solve-constraints'.ra: ")>,_),_));fuse-constraints
                                           ; expand-constraints )
                                 ; substitute-typevars; where(?((_,<debug(|"solve-constraints'.st: ")>,_),_)); cull-typevars )
  
  // ref-resolve : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // resolves names of values that have concrete types and retries solving constraints (in a fixpoint)
  ref-resolve(previous-strategy) = fixpoint(instantiate-universals;previous-strategy)
  
  // ref-resolve : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // resolves names of values even if their types are incomplete
  // (by copying the remaining constraints on it too)
  // and retries solving constraints (in a fixpoint)
  ref-resolve2(previous-strategy) = fixpoint(instantiate-incomplete;previous-strategy)
  
  // mono-rec : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // monomorphic recursion by replacing all CRefEq refering to its own binding
  // with the type found so far, without alpha-conversion of the variables!
  mono-rec(previous-strategy) = fixpoint(instantiate-recursion;previous-strategy)
  
  // prettify-result : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr)], [(TypeExpr, Int)], [(Int,Int)])
  // removes empty constraints lists and (nabl-)resolves names if possible 
  prettify-result = (map({\(n,ty,[]) -> (<try(nabl-uri-name)> n, ty)\});try(\[s] -> s\),ne-to-dot)
  
  ne-to-dot: (n,e) ->
$[digraph g {
  [nodelist]; 
  [edgelist]; 
  [dottededges]
}]
    where
      let dot-lines = separate-by(|";\n");concat-strings
      in nodelist    := <map-with-index(\(i,n) -> $[[i] ["["][<constraint-to-string> n]["]"]]\);dot-lines> n
       ; edgelist    := <map(\(a,b,lbl)->$[[a] -> [b] ["["]label="[lbl]"["]"]]\);dot-lines> e
       ; dottededges := <map-with-index(id);filter(ntd-helper1);mapconcat(ntd-helper2);dot-lines> n
      end
  
  ntd-helper1 = (id,?CRefEq(_,_){Anno("constraints",_)})
  ntd-helper2 : (i,CRefEq(_,_){Anno("constraints",c*)})
             -> <map(\c -> $[[i] -> [c] ["["]style="dotted"["]"]]\)> c*
  
  // cull-type-vars : (name, TypeExpr, [Constraint]) -> (name, TypeExpr, [Constraint])
  // remove constraints that mention unused typevars
  cull-typevars: ((n,t,l), (n*, e*)) -> ((n,t,l'), (n*, e*))
    with ttvs    := <free-typevars> t
       ; ltvs    := <filter(?CRefEq(_,_));free-typevars> l
       ; tvs     := <conc;make-set> (ttvs, ltvs)
       ; closure := <typevars-closure> (tvs, l)
       ; l'      := <filter(ct-helper(|closure))> l
  // ct-helper : (|[TypeVar]) -> Constraint -?> Constraint
  // predicate that checks CEq to have a TypeVar lhs or rhs that's in the set
  // and checks CRefEq to have at least one TypeVar in the TypeExpr that's in the set
  ct-helper(|set): CEq(t@TypeVar(_),_) -> <id>
    where <elem> (t,set)
  ct-helper(|set): CEq(_,t@TypeVar(_)) -> <id>
    where <elem> (t,set)
  ct-helper(|set): CRefEq(_,texpr) -> <id>
    where freevars := <free-typevars; make-set> texpr
        ; [_|_] := <isect> (freevars, set)
  
  // concrete-type : TypeExpr -?> TypeExpr
  // succeeds if the type is concrete and fails otherwise
  concrete-type = where(free-typevars => [])
  
  // binding-solved : (name, TypeExpr, [Constraint]) -?> (name, TypeExpr, [Constraint])
  // succeeds if all Constraints were satified
  // fails in all other cases
  binding-solved = ?(_,_,[])
  
  // typevars-closure : ([TypeVar], [Constraint]) -> [TypeVar]
  // Returns a list of (unique) typevars that can be reached (directly or
  // indirectly) through Constraints from the given TypeVar
  typevars-closure: (tvs,l) -> <foldl(typevar-closure);Fst> (tvs,(tvs,l))
  // typevar-closure: (TypeVar, ([TypeVar],[Constraint])) -> ([TypeVar],[Constraint])
  typevar-closure: (tv,(foundVars,l)) -> (closure,l)
    with relevantCs  := <filter(tc-helper1(|tv))> l
       ; freeVars    := <free-vars(tc-helper2(|tv), fail);make-set> relevantCs
       ; newVars     := <diff> (freeVars, foundVars)
       ; foundVars'  := <union> (foundVars, freeVars)
       ; (closure,l) := <foldl(typevar-closure)> (newVars,(foundVars',l))
  tc-helper1(|tv) = ?CEq(tv,_) + ?CEq(_,tv) + ?CRefEq(_,tv)
  tc-helper2(|tv): t@TypeVar(_) -> [t] where <not(eq)>(t,tv)
  
  // substitute-typevars : ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)])) -> ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)]))
  // Substitute type variables in the constraints for the equivalent type expressions founds,
  // then substitute the type variable in the type of the name-binding (the second value in the 3-tuple input)
  // These substitution are only done when the CEq constraint is not recursive,
  // i.e. only for CEq(tv@TypeVar(_), b) where "tv not in vars(b)"
  substitute-typevars: ((nm,t,l),gr) -> ((nm,t',l'),gr'')
    with (concrete*,todo*,gr') := <fixpoint(st-helper1)> ([],<map(typevar-first)> l,gr)
       ; l' := [concrete*,todo*]
       ; (l1*,l2*,gr'') := <fixpoint(st-helper1)> (l',[<mkCRefEq>(nm,t)],gr')
       ; CRefEq(nm,t') := <last> [l1*,l2*]
    
  st-helper1: (concrete*,todo,gr) -> (concrete',todo'',gr')
    with d := <filter(st-helper2(|gr))> concrete*
       ; (todo',gr') := <thread-map(try(st-helper3(|d)))> (todo,gr)
       ; (newconcrete*,todo'') := <partition(st-helper5)> todo'
       ; concrete' := [concrete*, newconcrete*]
         
  st-helper2(|gr): c -> (a,(b,i))
    where (a@TypeVar(_),b) := <unCEq> c
    with (n,e) := gr
       ; i := <get-node>(c,n)
  
  st-helper3(|dict): (c@cc#([l,r]),(n,e)) -> (c',(n',e'))
    with (r',i*) := <thread-alltd(st-helper4(|dict))> (r,[])
       ; c' := cc#([l,r'])
       ; if <get-node> (c',n)
           then (n',e') := (n,e)
           else ci  := <get-node> (c,n)
              ; n'  := <conc> (n,[c'])
              ; ci' := <get-node> (c',n')
              ; e'  := <conc> (e,<map(\i -> (i,ci',"subst-vars")\)> [ci|i*])
         end
  
  st-helper4(|dict): (tv@TypeVar(_),i*) -> (te,[i|i*])
    where (te,i) := <lookup> (tv,dict)
  
  st-helper5 = where(CEq(?TypeVar(_),concrete-type) + CRefEq(id,concrete-type))
  
  // instantiate-universals : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // instantiate universally quantified type variables that have been fully resolved
  instantiate-universals: (l,gr) -> (l',gr')
    with dict := <filter(iu-helper1(|<Fst>gr))> l
       ; (l',gr') := <thread-map(iu-helper2(|dict))> (l,gr)
  iu-helper1(|n): (nm,t,l) -> (nm,(t,<get-node>(<mkCRefEq>(nm,t),n)))
    where (<concrete-type> t) + (![] => l)
  iu-helper2(|dict): ((nm,ty,l),gr) -> ((nm,ty,l'),gr')
    with (l',gr') := <thread-map(try(iuh(|dict)))> (l,gr)
  iuh(|dict): (c@CRefEq(uri,te),(n,e)) -> (c',(n',e'))
    where (newlhs,i) := <lookup;refresh-vars>(uri,dict)
    with c' := <mkCEq>(newlhs,te) 
       ; if <get-node> (c',n)
           then (n',e') := (n,e)
           else ci  := <get-node> (c,n)
              ; n'  := <conc> (n,[c'])
              ; ci' := <get-node> (c',n')
              ; e'  := <conc> (e,<map(\i -> (i,ci',"inst-univ")\)> [ci,i])
         end
  
  // instantiate-incomplete : ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)])) -> ([(name, TypeExpr, [Constraint])], ([(TypeExpr, Int)], [(Int,Int)]))
  // instantiate universally quantified type variables even if their types are incomplete
  // (by copying the remaining constraints on it too)
  instantiate-incomplete: (l,gr) -> (l',gr)
    with dict := <map(ii-helper1)> l
       ; l' := <map((id,id,mapconcat(ii-helper2(|dict))))> l
  ii-helper1: (n,t,c)  -> (n,(t,c))
  ii-helper2(|dict) = \CRefEq(uri,ty) -> [<mkCEq>(t,ty) | c]
      where (t,c) := <lookup;refresh-vars> (uri,dict)\
    <+ ![<id>]
  
  instantiate-recursion = thread-map(instantiate-recursion')
  // instantiate-recursion' : ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)])) -> ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)]))
  // takes all references to the binding and replaces them
  // with the type of the binding as found so far, without alpha-converting the variables in it
  instantiate-recursion': ((n,t,l),gr) -> ((n,t,l'),gr)
    with l' := <map(ir-helper(|n,t))> l
  ir-helper(|n,t): CEq(_,_) -> <id>
  ir-helper(|n,t): CRefEq(n,te) -> <mkCEq> (t,te)
  ir-helper(|n,t): CRefEq(n',_) -> <id> where <not(eq)> (n,n')
  
  insert-existentials = map(insert-existentials')
  // insert-existentials' : (name, TypeExpr, [(name, TypeExpr)], [Constraint]) -> (name, TypeExpr, [Constraint])
  // Changes CRefEq to CEq is the reference is to an existentially quantified type variable
  insert-existentials': (u-name, u-type, existentials, constraints) -> (u-name, u-type, constraints')
    with constraints' := <alltd(ie-helper(|existentials))> constraints
  ie-helper(|existentials): CRefEq(uri, ty) -> <mkCEq> (ty, ty') where ty' := <lookup> (uri, existentials)
  
  // remove-aliases : ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)])) -> ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)]))
  // finds and removes constraints of the form CEq(TypeVar(a), TypeVar(b)) by replacing all instances of a with b
  remove-aliases: ((nm, t, l), (n, e)) -> ((nm, t', l''), (n''', e'''))
    with (alias,l') := <partition(?CEq(TypeVar(_),TypeVar(_)))> l
       ; (((), (), alias'), (n', e')) := <fuse-constraints> (((), (), alias), (n, e))
       ; (l'', n'', e'') := <foldl(ra-helper1)> (alias',(l',n',e'))
       ; (CRefEq(nm,t'),n''',e''')  := <foldl(ra-helper2)> (alias',(<mkCRefEq>(nm,t),n'',e''))
  ra-helper1: (a@CEq(tv1,tv2),(c,n,e)) -> (c', n', e')
    with c' := <alltd(?tv1;!tv2)> c
       ; if <diff(c-eq);?[]> (c',n)
           then (n',e') := (n,e)
           else ai := <get-node>(a,n)
              ; (n',e') := <foldl(rah(|ai))> (<zip> (c,c'), (n,e))
         end 
  ra-helper2: (a@CEq(tv1,tv2),(c,n,e)) -> (c', n', e')
    with c' := <alltd(?tv1;!tv2)> c
       ; if <get-node> (c',n)
           then (n',e') := (n,e)
           else ai := <get-node>(a,n)
              ; (n',e') := <rah(|ai)> ((c,c'), (n,e))
         end
  rah(|ai): ((c,c'),(n,e)) -> (n', e')
    with if <get-node> (c', n)
           then (n',e') := (n,e)
           else n' := <conc> (n,[c'])
              ; ci := <get-node>(c,n)
              ; i  := <get-node> (c',n')
              ; e' := <conc> (e,[(ai,i,"remove-alias"), (ci,i,"remove-alias")])
         end

  // fuse-constraints : ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)])) -> ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)]))
  // makes sure all equality constraints with top-level type vars have the type var first,
  // then fuses constraints that start with the same left-hand side typevariable. 
  fuse-constraints: ((nm, t, c), (n, e)) -> ((nm, t, c''), (n', e'))
    with c'  := <map(typevar-first)> c
       ; (c'',n',e') := <foldl(fc-helper <+ Snd)> (c',(c',n,e))
  // fc-helper : (Constraint, [Constraint]) -?> [Constraint]
  // when two or more equivalence constraints start with the same typevariable,
  // generate constraints that all right-hand sides are equivalent
  fc-helper: (CEq(tv@TypeVar(_),_),(l, n, e)) -> (l', n'', e'')
    where (eqs,rest) := <partition(one(?tv))> l
        ; <min-length(|2)> eqs
    with new := <mapconcat(fch-1(|n));filter((not(?tv),id))> eqs
       ; uniqueNew := <fch-2
                      ;try(\[_] -> []\)
                      ;consecutive-pairs(fch-4)
                      ;filter(where(\(a,_) -> <not(fetch(?a))> n\))> new
       ; new' := <unzip;Fst> uniqueNew
       ; n' := <conc> (n,new')
       ; e' := <conc> (e, <mapconcat(fch-3(|n'))> uniqueNew)
       ; (((),(),new''),(n'',e'')) := <!(((),(),<id>), (n',e'));expand-constraints> new'
       ; l' := <union> ([<Hd> eqs|rest], new'')
  
  fch-1(|n): c@cc#(a) -> <map(!(<id>,i))> a
    with i := <get-node> (c,n)
    where <?"CEq" + ?"CRefEq"> cc

  fch-2: [] -> []
  fch-2: [(a,b)|t] -> [(a, b') | t']
    with b' := <uniq> [b | <filter(?(a,_);Snd)> t]
       ; t'  := <filter(not(?(a,_)));fch-2> t

  fch-3(|n'): (c,p*) -> <map(\p -> (p,i,"fuse")\)> p*
    with i := <get-node> (c,n')
  
  fch-4: ((a,b*),(c,d*)) -> (<mkCEq>(a,c),[b*,d*])
  
  // expand-constraints : ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)])) -> ((name, TypeExpr, [Constraint]), ([(TypeExpr, Int)], [(Int,Int)]))
  // helper for expand-constraint
  expand-constraints: ((n,t,c), gr) -> ((n,t,c''), gr')
    with (c', gr') := <thread-map(expand-constraint)> (c, gr)
       ; c'' := <concat> c'
  // expand-constraint : (Constraint, ([(TypeExpr, Int)], [(Int,Int)])) -> ([Constraint], ([(TypeExpr, Int)], [(Int,Int)]))
  // Expands equality by unifying inner type variables.
  // Uses print-failure when it finds two distinct concrete types.
  expand-constraint: (c@CEq(t1,t2), (n,e)) -> (c',(n',e'))
    with c' := <unify'(?TypeVar(_));map(mkCEq)> (t1,t2)
       ; newc := <diff(c-eq)> (c', n)
       ; if <?[]> newc
           then (n',e') := (n,e)
           else n' := <conc> (n,newc)
              ; i  := <get-node> (c,n)
              ; e' := <conc> (e,<map(\c -> (i, <get-node> (c,n'), "expand")\)> newc)
         end
  expand-constraint: (c@CRefEq(_,_),gr) -> ([c],gr)
  expand-constraint: CEq(ConstrType(_, n),ConstrType(_, n')) ->
    <print-failure(|$[Failed to match [n] with [n']: ])>
    where <not(?n)> n'
  
  // simple unification 
  // The builtin unify strategy fails on input like [(TypeVar(a),FuncType(TypeVar(a),TypeVar(b)))]
  // because tries find the most general unifier
  unify'(isvar) = \(a@c#(as),b@c#(bs)) -> <zip(unify'(isvar));concat> (as,bs)
    where <not(isvar)> a; <not(isvar)> b\ <+ \(a,b) -> [<id>]\
  