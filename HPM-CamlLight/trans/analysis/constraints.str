module analysis/constraints

imports
  include/CamlLight
  extra-constructors
  libstratego-gpp
  lib/runtime/tmpl/pp
  Extra-PP-Rules.pp
  Identifier.pp.generated
  Types.pp.generated
  lib/runtime/nabl/-
  
// setting up pretty printing
strategies
  abox2text = box2text-string(|10000)
  pp-TypeExpr  = strip-annos ; prettyprint-TypeExpr ; abox2text
  pp-GlobalName  = strip-annos ; prettyprint-GlobalName ; abox2text

// Two constraints:
// equality 
// refering to a (unique) name (that probably has a polymorphic type), and the type expression should be an alpha-conversion away from equivalent
signature
  constructors
    CEq     : TypeExpr * TypeExpr -> Constraint
    CRefEq  : URI * TypeExpr -> Constraint 

strategies
  // fresh-var : TypeExpr
  // fresh-var generate a new type variable with unique name TV<some_number>
	fresh-var = !TypeVar(<newname> "tv#")
	
  free-typevars = free-vars(\TypeVar(_) -> [<id>]\, fail)
	
  // refresh-vars : a -> a
  // alpha-conversion of the typevariables to give each unique one a fresh name
  // doesn't take any context into account
  refresh-vars: t -> t'
    with vars := <free-typevars> t
       ; dict := <map(!(<id>, <fresh-var>))> vars
       ; t' := <alltd({tv:?tv@TypeVar(_);<lookup> (tv, dict)})> t
	
	// mkCEq : (TypeExpr,TypeExpr) -> Constraint
	mkCEq = !CEq(<Fst>, <Snd>)
	// mkCRefEq : (TypeExpr,TypeExpr) -> Constraint
  mkCRefEq = !CRefEq(<Fst>, <Snd>)
  
  // unCEq : Constraint -> (TypeExpr,TypeExpr)
  unCEq: CEq(a,b) -> (a,b)
  // unCRefEq : Constraint -> (TypeExpr,TypeExpr)
  unCRefEq: CRefEq(a,b) -> (a,b)
  
  // typevar-first : Constraint -> Constraint
  // flips the order of the two equivalent TypeExpr if the first is not a type variable and the second is
  typevar-first = try(\CEq(a, b@TypeVar(_)) -> CEq(b, a) where <not(?TypeVar(_))> a\)
  
  constraint-to-string: CEq(a,b) -> $[label="[<pp-TypeExpr>a] = [<pp-TypeExpr>b]"]
  // Unicode number 10927 is the \preceq symbol (preceding or equal)
  constraint-to-string: CRefEq(a,b) -> $[label="[<pp-TypeExpr>b] &#10927; [<try(nabl-uri-name);pp-GlobalName>a]", shape="box"]
  
strategies
  // consecutive-pairs : ((a,a) -> b|) -> [a] -> [b]
  // consecutive pairs takes a list of items and gives back a list of neighbouring pairs
  // e.g. <consecutive-pairs(id)> [1,2,3,4] == [(1,2), (2,3), (3,4)] 
  consecutive-pairs(s) = Dupl;(id,Tl<+![]);zipr(s)
  
  // multi-lookup : (|[(k,v)]) -> k -> [v]
  // find all values associated to the key, instead of only the first 
  multi-lookup(|l): n -> <filter(?(n,_));map(Snd)> l
  // keys : [(k,v)] -> [k]
  // get the list of *unique* keys from an associative list
  keys = map(Fst);make-set
  
  get-index(s) = ?(v,<id>);get-index0(!(v,<id>);s);inc
  
  get-node = get-index(c-eq)
  
  c-eq = (rm-annotations,rm-annotations);eq <+ {a,b:?(CEq(a,b),CEq(b,a))}
  
  // min-length : (|int) -> [a] -> [a]
  // identity function, but fails when the list is not as long as the given param
  min-length(|len): list -> list
    where <length;!(<id>,len);geq> list
  
  // is-effective : (a -> b|) -> a -> Option(b)
  // is-effective returns the result of applying the param strategy,
  // if it changes the input term and fails otherwise
  is-effective(s): term -> res
    where result := <s> term
        ; res := <not(eq);!Some(result) <+ !None()>(term,result)
  
  // fixpoint : (a -> b|) -> a -> b
  // calculates a fixpoint by taking a strategy param and an input and apply the strategy until nothing changes
  fixpoint(s): a -> b'
    where b  := <is-effective(s)> a
        ; b' := <\Some(c)-> <fixpoint(s)> c\ <+ !a> b
    
  // scanfix : (a -> b|) -> a -> [b]
  // debug version of fixpoint that gives back all the intermediate results
  scanfix(s): a -> b'
    where b  := <is-effective(s)> a
        ; b' := <\Some(c) -> [c | <scanfix(s)> c]\ <+ ![a]> b
    
  // scanfix : (a -> b | int) -> a -> [b]
  // debug version of fixpoint that gives back all the intermediate results, but stop recursing after the amount of rounds given in the term param. 
  scanfix(s|n): a -> b'
    where b  := <is-effective(s)> a
        ; b' := <where(<gt>(n,1));\c -> [c | <scanfix(s|<dec>n)> c]\ <+ ![a]> b