module analysis/desugar

imports
	include/CamlLight
	extra-constructors

overlays
	
	FApp(name, e1, e2) = FuncApp(FuncApp(Prefix(name), e1), e2)
		
rules
	// prefix and infix operators are desugared here to function or constructor application 
	// as suggested in the CamlLight Manual: http://caml.inria.fr/pub/docs/manual-caml-light/node3.8.html
	
	desugar: Negate(e)  -> FuncApp(GlobalName("minus"), e)
	desugar: NegateF(e) -> FuncApp(GlobalName("minus_float"), e)
	desugar: Deref(e)   -> FuncApp(Prefix("!"), e)
	desugar: Not(e)     -> FuncApp(Prefix("not"), e)
	
	desugar: ConsExpr(e1,e2)   -> ConstrApp(PrefixCons(), TupleExpr([e1, e2]))
	desugar: And(e1,e2)        -> FApp("&",   e1, e2)
	desugar: Or(e1,e2)         -> FApp("or",  e1, e2)
	desugar: Add(e1,e2)        -> FApp("+",   e1, e2)
	desugar: Sub(e1,e2)        -> FApp("-",   e1, e2)
	desugar: Mul(e1,e2)        -> FApp("*",   e1, e2)
	desugar: Div(e1,e2)        -> FApp("/",   e1, e2)
	desugar: Mod(e1,e2)        -> FApp("mod", e1, e2)
	desugar: AddF(e1,e2)       -> FApp("+.",  e1, e2)
	desugar: SubF(e1,e2)       -> FApp("-.",  e1, e2)
	desugar: MulF(e1,e2)       -> FApp("*.",  e1, e2)
	desugar: DivF(e1,e2)       -> FApp("/.",  e1, e2)
	desugar: PowF(e1,e2)       -> FApp("**",  e1, e2)
	desugar: ListConc(e1,e2)   -> FApp("@",   e1, e2)
	desugar: StringConc(e1,e2) -> FApp("^",   e1, e2)
	desugar: RefAssign(e1,e2)  -> FApp(":=",  e1, e2)
	desugar: StructEq(e1,e2)   -> FApp("=",   e1, e2)
	desugar: StructNeq(e1,e2)  -> FApp("<>",  e1, e2)
	desugar: PhyEq(e1,e2)      -> FApp("==",  e1, e2)
	desugar: PhyNeq(e1,e2)     -> FApp("!=",  e1, e2)
	desugar: Lt(e1,e2)         -> FApp("<",   e1, e2)
	desugar: Leq(e1,e2)        -> FApp("<=",  e1, e2)
	desugar: Gt(e1,e2)         -> FApp(">",   e1, e2)
	desugar: Geq(e1,e2)        -> FApp(">=",  e1, e2)
	desugar: LtF(e1,e2)        -> FApp("<.",  e1, e2)
	desugar: LeqF(e1,e2)       -> FApp("<=.", e1, e2)
	desugar: GtF(e1,e2)        -> FApp(">.",  e1, e2)
	desugar: GeqF(e1,e2)       -> FApp(">=.", e1, e2)
	
	//IDENT -> GlobalName
	desugar: CConstrDecl(cc) -> CConstrDecl(GlobalName(cc))

strategies
	desugar-all = bottomup(try(desugar))