module analysis/collect-constraints

imports
  include/CamlLight
  extra-constructors
  analysis/constraints
  lib/runtime/nabl/-
  lib/runtime/analysis/-
  lib/runtime/task/-
  lib/runtime/types/-

strategies
  // (global) Let definitions become special tuples that can be refered to with CRefEq constraints
  // They are basically: name : forall type.[exists body-e*. body-c*]type
  
  // collect-constraint is a top-down traversal, handing down the type variable for every expression
  // but you could also have each expression return a freshly generated type variable for itself and add an extra constraint
  // (this might actually make more sense for human readability)
  collect-constraint: GlobalValDef(name, body) ->
      [(<try(name-resolve)> name, type, body-e*, body-c*), body-u*]
      where type := <fresh-var>
          ; (body-u*, body-e*, body-c*) := <collect-constraint> (body, type)
  collect-constraint: GlobalRecValDef(name, body) ->
      [(<try(name-resolve)> name, type, body-e*, body-c*), body-u*]
      where type := <fresh-var>
          ; (body-u*, body-e*, body-c*) := <collect-constraint> (body, type)
            
  // each of the following collects universally and existentially quantified variables and their typevariables, and constriants
  // Note that the universally quantified variables list isn't actually used because local let bindings aren't supported yet
  collect-constraint: (FunctionDef([SimpleMatch(PatternVar(name), body)]), ty) ->
      ([body-u*], [(uri, in-ty) | body-e*], [c | body-c*])
      where in-ty  := <fresh-var>
          ; out-ty := <fresh-var>
          ; type   := FuncType(in-ty, out-ty)
          ; uri    := <try(name-resolve)> name
          ; c      := <mkCEq> (ty, type)
          ; (body-u*, body-e*, body-c*) := <collect-constraint> (body, out-ty)
  
  collect-constraint: (FuncApp(f, a), ty) -> ([u1*,u2*], [e1*,e2*], [c1*,c2*])
    where a-ty := <fresh-var>
        ; f-ty := FuncType(a-ty, ty)
        ; (u1*, e1*, c1*) := <collect-constraint> (f,f-ty)
        ; (u2*, e2*, c2*) := <collect-constraint> (a,a-ty)
  
  collect-constraint: (IfElseExpr(c,t,e), ty) -> ([u1*,u2*,u3*], [e1*,e2*,e3*], [c1*,c2*,c3*])
    where c-ty := ConstrType(None(), GlobalName("bool"))
        ; (u1*, e1*, c1*) := <collect-constraint> (c,c-ty)
        ; (u2*, e2*, c2*) := <collect-constraint> (t,ty)
        ; (u3*, e3*, c3*) := <collect-constraint> (e,ty)
  
  collect-constraint: (p@Prefix(_), ty) -> ([], [], [CEq(ty, <debug;get-type;refresh-vars> p)])
  
  collect-constraint: (i@Int(_), ty)    -> ([], [], [CEq(ty, <debug;get-type;refresh-vars> i)])
  collect-constraint: (f@Float(_), ty)  -> ([], [], [CEq(ty, <get-type;refresh-vars> f)])
  collect-constraint: (c@Char(_), ty)   -> ([], [], [CEq(ty, <get-type;refresh-vars> c)])
  collect-constraint: (s@String(_), ty) -> ([], [], [CEq(ty, <get-type;refresh-vars> s)])
  collect-constraint: (u@Unit(), ty)    -> ([], [], [CEq(ty, <get-type;refresh-vars> u)])
  
  collect-constraint: (Var(gn), ty)     -> ([], [], [<mkCRefEq>(<name-resolve> gn, ty)])
  
  // Get the unique URI NaBL uses
  name-resolve: name -> uri
    where <has-annotation(?Use(u))> name
        ; Def(uri) := <task-get-results; Hd> u
  name-resolve: name -> uri
    where <has-annotation(?Def(uri))> name
  
  // Going over the root of the tree:
  collect-constraints: 
    Module(mp*) -> <mapconcat(cc-helper)> mp*
  // special cases for the supported subset:
  cc-helper:
  	MP(ValDef(list)) -> <mapconcat(collect-constraint)> list
  cc-helper:
    MP(RecValueDef(list)) -> <mapconcat(collect-constraint)> list