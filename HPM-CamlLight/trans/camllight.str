module camllight

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/CamlLight
  editor/CamlLight-Outliner
  lib/editor-common.generated
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/analysis/-
  lib/runtime/editor/-
  
  trans/analysis/-
  trans/editor/-
  pp

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface: (ast, path, project-path) -> 
		<analysis-single-default(desugar-all, disamb-all;reanalyze-ast(|<language>, path, project-path), id|<language>)>
	analysis-multiple-default-interface: (ast, path, project-path) ->
		<analysis-multiple-default(parse-file <+ !(), desugar-all, disamb-all;reanalyze-ast(|<language>, path, project-path), id|<language>, <project-path>)>
	
  // analysis-single-default-interface = 
  //   analysis-single-default(desugar-all, post-desugar-all, id|<language>)
  // analysis-multiple-default-interface = 
  //   analysis-multiple-default(parse-file <+ !(), desugar-all, post-desugar-all, id|<language>, <project-path>)

	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-partial-CamlLight-string |<language>, project-path);properties-to-html>target

  // Gathers the outline nodes for the outline view.
  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast

  // Gathers the properties for the properties view.
  editor-properties:
    (target, position, ast, path, project-path) ->
      <get-all-editor-properties(pp-partial-CamlLight-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
  
  // Formats the program using a pretty printer.  
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging
  
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <desugar-all> selected
  
  desugar-all = fail
      
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast
      
  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-project-resolve = 
    analysis-debug-index-project-resolve(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)
    
  debug-reanalyze = 
    analysis-debug-reanalyze(|<language>)
