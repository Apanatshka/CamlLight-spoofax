module runtime/nabl/uri

imports
  
  runtime/nabl/interface
  runtime/index/core
  runtime/editor/annotations
  
signature

  sorts
  
    Language
    Segment
    Qualifier
    
  constructors
    
    Language    : String                       -> Language
    ID          : Namespace * Name * Qualifier -> Segment
    Subsequent  : String                       -> Segment
    Anonymous   : String                       -> Segment
    Unique      : String                       -> Qualifier
    NonUnique   :                                 Qualifier
    Unique      :                                 Qualifier
    URI         : Language * List(Segment)     -> URI
    Barrier     : List(Namespace)              -> Annotation
    
rules // Construction
  
  nabl-base-uri = 
    !URI(<id>, [])
     
  nabl-extend-uri(|segment) = 
    URI(id, ![segment|<id>])
    
  nabl-extend-uri(|namespace, name, qualifier) = 
    URI(id, ![ID(namespace, name, qualifier)|<id>])
    
  nabl-replace-uri(|segment) = 
    URI(id, [!segment|id])
    
  nabl-replace-uri(|namespace, name, qualifier) = 
    URI(id, [!ID(namespace, name, qualifier)|id])
    
  nabl-replace-uri-qualifier(|qualifier) =
    URI(id, [ID(id, id, !qualifier)|id])
      
  nabl-nonunique-uri =
		URI(id, [ID(id, id, !NonUnique())|id])
		
	nabl-uri-add-barriers(|namespace*):
		URI(lang, [seg|s]) -> URI(lang, [<replace-annotation(?Barrier(_)|new-barrier)> seg|s])
		where
			existing-namespace* := <get-annotation(?Barrier(<id>)) <+ ![]> seg;
			new-barrier         := Barrier([existing-namespace*, namespace*])
			
	nabl-uri-strip-barriers = 
		URI(id, map(remove-annotations(?Barrier(_))))
		
rules // Stable URI extensions
  
  nabl-extend-uri(|table, partition, ns, n, u):
    uri -> <nabl-extend-uri(|ns, n, qualifier)> uri
    where 
	    if where(<?NonUnique()> u) then
	      qualifier := NonUnique()
	    else
	      qualifier := Unique(<stable-uri-part(|table, partition)> (partition, uri, ns, n))
	    end
    
  nabl-extend-uri-anonymous(|table, partition):
    uri -> <nabl-extend-uri(|Anonymous(unique))> uri
    where
      unique := <stable-uri-part(|table, partition)> (partition, uri, "anonymous")
      
  nabl-extend-uri-subsequent(|table, partition):
    uri -> <nabl-extend-uri(|Subsequent(unique))> uri
    where
      unique := <stable-uri-part(|table, partition)> (partition, uri, "subsequent")

  stable-uri-part(|table, partition):
    key -> $[[partition]/[unique]]
    where
      if value := <hashtable-get(|key)> table then
        unique    := <int-to-string> value;
        new-value := <inc> value
      else
        unique    := "0";
        new-value := 1
      end;
      <hashtable-put(|key, new-value)> table
      
rules // Projections
  
  nabl-uri = fail
  nabl-uris = fail
  nabl-value = fail
  nabl-values = fail
  
  nabl-uri-language:
    URI(language, _) -> language
    
  nabl-uri-language-name:
    URI(Language(name), _) -> name
    
  nabl-uri-path:
    URI(_, path) -> path
    
  nabl-uri-parent:
    URI(language, path) -> URI(language, parent)
    where
      [_|parent] := path
  
  nabl-uri-parents:
  	uri -> parent*
  	where
  		if parent := <nabl-uri-parent> uri then
  			parent* := [parent|<nabl-uri-parents> parent]
			else
				parent* := []	
			end
  		
	nabl-uri-parents(|target-ns):
  	uri -> parent*
  	where
  		barrier-ns* := <nabl-uri-barriers <+ ![]> uri;
  		if <not(elem)> (target-ns, barrier-ns*); parent := <nabl-uri-parent> uri then
  			// Strip barriers from parent because URI's in the index also do not have barriers (matching would fail).
  			parent* := [<nabl-uri-strip-barriers> parent|<nabl-uri-parents(|target-ns)> parent]
			else
				parent* := []	
			end
        
  nabl-uri-name:
    uri -> <nabl-uri-path; Hd; nabl-segment-name> uri
    
  nabl-uri-namespace:
    uri -> <nabl-uri-path; Hd; nabl-segment-namespace> uri    

  nabl-uri-qualifier:
    uri -> <nabl-uri-path; Hd; nabl-segment-qualifier> uri
    
  nabl-uri-barriers:
  	uri -> <nabl-uri-path; Hd; nabl-segment-barriers> uri
      
  nabl-segment-namespace:
    ID(namespace, _, _) -> namespace
    
  nabl-segment-name:
    ID(_, name, _) -> name
    
  nabl-segment-name:
  	Subsequent(name) -> name
  
	nabl-segment-name:
  	Anonymous(name) -> name
  	
	nabl-segment-qualifier:
    ID(_, _, qualifier) -> qualifier
    
  nabl-segment-barriers:
  	segment -> namespace*
  	where
  		Barrier(namespace*) := <get-annotation(?Barrier(_))> segment 
    
  nabl-uri-scope      = URI(id, Tl)
  nabl-uri-scopes    = nabl-closure(nabl-uri-scope)
  
  nabl-uri-in-scope  = URI(id, [id|Tl])
  nabl-uri-in-scopes = nabl-closure(nabl-uri-in-scope)
  
  nabl-closure(s) = 
      s 
    < ![<id>|<nabl-closure(s)>] 
    + ![]

rules // Conditions
  
  nabl-is-uri =
  	?URI(_, _)
  
  nabl-is-unique =
    nabl-uri-qualifier;
    ?Unique(_)
    
  nabl-is-nonunique =
    nabl-uri-qualifier;
    ?NonUnique()
    
  nabl-segment-is-id =
  	?ID(_, _, _)

rules // Equality
  
  nabl-uri-eq = 
    ?(URI(lang1, segs1), URI(lang2, segs2));
    <eq> (lang1, lang2);
    <zip(nabl-uri-segment-eq)> (segs1, segs2)
    
  nabl-uri-segment-eq =
    ?(ID(ns1, name1, _), ID(ns2, name2, _));
    <eq> (ns1, ns2);
    <eq> (name1, name2)
     
  nabl-uri-segment-eq =
    ?(Subsequent(_), Subsequent(_))
    
  nabl-uri-segment-eq =
    ?(Anonymous(_), Anonymous(_))
    
rules // Printing
  
  nabl-print-uri:
    uri -> $[[ns] [names]]
    where
      ns#(_) := <nabl-uri-namespace> uri;
      names  := <nabl-uri-path; filter(nabl-segment-name); separate-by(|"."); concat-strings> uri
        
rules /** @internal Projections */

  /** @internal */
  nabl-uri:
    URI(_, _) -> <id>
    
  /** @internal */
  nabl-value:
    URI(_, _) -> <id>
 
  /** @internal */
  nabl-uris:
    URI(_, _) -> [<id>]
    
  /** @internal */
  nabl-values:
    URI(_, _) -> [<id>]

    
  /** @internal */  
  nabl-uri =
  	has-annos;
  	get-annos;
  	fetch-elem(nabl-uri)

  /** @internal */  
  nabl-value =
  	has-annos;
  	get-annos;
  	fetch-elem(nabl-value)

  /** @internal */  
  nabl-uris =
  	has-annos;
  	get-annos;
  	filter(nabl-uri)

  /** @internal */  
  nabl-values =
  	has-annos;
  	get-annos;
  	filter(nabl-value)

