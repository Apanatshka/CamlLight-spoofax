module runtime/nbl/check

imports
	
	runtime/nbl/resolve
	runtime/nbl/collect
	runtime/nbl/query
	runtime/nbl/tasks
	runtime/nbl/entries
	runtime/nbl/interface
	runtime/nbl/uri
	runtime/nbl/utils
	runtime/task/core
	runtime/task/messages
	runtime/task/tasks
	
rules // Error checking tasks
	
	nabl-unresolved-task(|partition, task):
		name -> name
		where
			not(nabl-check-disable-unresolved)
		with
			<nabl-fix-name; task-create-error-on-failure(|partition, task, "Unresolved reference")> name
			
	nabl-duplicate-task(|partition, unique):
		name -> name
		where
			uri := <nabl-uri> name;
			ns	:= <nabl-uri-namespace> uri;
			not(<nabl-check-disable-duplicate(|uri, ns)> name)
		with
			if Unique() := unique then
				uri'		:= <nabl-uri-parent> uri;
				resolve := <new-task(|partition)> ResolveDefs(uri', ns, name);
				<task-create-error-on-multiple(|partition, resolve, "Duplicate definition")> name
			end
			
	nabl-hiding-task(|partition):
		name -> name
		where
			uri := <nabl-uri> name;
			ns	:= <nabl-uri-namespace> uri;
			not(<nabl-check-disable-hiding(|uri, ns)> name)
		where
			if inverse-alias* := <nabl-get-all-inverse-aliasses> uri then
				uri* := <map(nabl-uri-parent; nabl-uri-parent)> inverse-alias*
			else
				uri* := <nabl-uri-parent; nabl-uri-parent; ![<id>]> uri
			end;
			task* := <mapconcat(nabl-use-subtasks(id, fail|partition, ns, <nabl-fix-name> name, [], All()))> uri*;
			task	:= <new-task(|partition)> Choice(task*);
			<task-create-error-on-success(|partition, task, "Declaration hides previous definition")> name

	message-task(|partition) = 
		nabl-hiding-task(|partition)

rules // Legacy
 
	nabl-is-unresolved =
		?node;
		has-annos;
		get-annos;
		where(nabl-has-reference);
		not(nabl-collect-one-resolved-def)
	
	nabl-get-ambiguities =
		nabl-collect-all-resolved-defs;
		mapconcat(nabl-get-all-aliases);
		filter(nabl-uri; nabl-uri-parent);
		make-set;
		where(<gt> (<length>, 1))
	
	nabl-get-duplicate-definitions =
		has-annos;
		get-annos;
		collect-one(?Def(_));
		nabl-get-all-definitions;
		make-set;
		where(<gt> (<length>, 1))

