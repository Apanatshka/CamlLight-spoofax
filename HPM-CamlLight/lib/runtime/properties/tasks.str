module runtime/properties/tasks

imports 
	
	runtime/nabl/incremental
	runtime/nabl/uri
	runtime/properties/query
	runtime/properties/eq
  runtime/task/core
  
signature
  
  constructors

    PropCalc    : Term                              -> Instruction
    PropList    : List(Term)                        -> Instruction
    PropsLookup : Property * URI                    -> Instruction    
    PropCheck   : Property * Relation * Term * Term -> Instruction
    
rules

  perform-task(|n) =
  	?PropsLookup(kind, <nabl-uri>)
  ; nabl-add-uri-read(|n)
	// HACK: task-result-combinations also creates dependencies if any result has not been solved yet.
	// Proper way would be to decompose the PropLookup into a ResolveUseToDef, GetProperty and InsertCombinations task.
  ; get-index-properties(|kind)
  ; map(fancy-combination)
  ; (concat <+ filter(?Dependency(<id>)); !Dependency(<concat>))
    
  perform-cyclic-task(|n) =
  	?PropsLookup(kind, <nabl-uri>)
  ; nabl-add-uri-read(|n)
	; get-index-properties(|kind); filter(insert-results); flatten-list; make-set
	  // TODO: does not make combinations
  
  fancy-combination = 
     ?Result(_)
  ;  (task-result-combinations <+ ![])
  <+ (task-result-combinations; not(?[])) 
  <+ MkSingleton
  
  // perform-task(|n) =
  // 	?PropLookup(kind, <id>)
  // 	;	nabl-add-uri-read(|n) 
  //   ; nabl-get-all-properties(|kind)
  //   ; insert-results-or-create-dependency 
  // 	; (task-collect-dependencies <+ try(concat))
  //   ; try(map(Hd); MkSingleton) // HACK
      
  perform-task(|n): 
  	PropCheck(kind, rel, actual, expected) -> [<nabl-property-eq> (kind, rel, (actual, expected))]

