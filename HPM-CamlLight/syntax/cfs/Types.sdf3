module cfs/Types

imports
  lex/Identifier

context-free start-symbols
  TypeExpr

syntax
  TYPEVARIABLE-CF.TypeVar = "'" IDENT-CF 

context-free syntax
  TypeExpr                = [[TYPEVARIABLE]]
  TypeExpr                = [([TypeExpr])] {bracket}
  TypeExpr.FuncType       = [[TypeExpr] -> [TypeExpr]] {right}
  TypeExpr.TupleType      = [[TupleTypeExpr]]
  TypeExpr.ConstrType     = [[TypeExprParams] [GlobalName]]
  
  TypeExprParams.None           = []
  TypeExprParams                = [[TypeExpr]] {prefer} // over TypeExprParams.TypeExprParams (handy for tests)
  TypeExprParams.TypeExprParams = [([{TypeExpr ", "}+])]

context-free priorities
  TypeExprParams = TypeExpr > // i.e. TypeExpr.ConstrType
  TypeExpr = TupleTypeExpr  >
  TypeExpr = TypeExpr "->" TypeExpr

context-free syntax
  TupleTypeExpr = TypeExpr "*" TypeExpr      {ast("[<1>,<2>]")}
  TupleTypeExpr = TypeExpr "*" TupleTypeExpr {ast("<conc([<1>],<2>)>")}

context-free priorities
  TupleTypeExpr = TypeExpr "*" TypeExpr >
  TypeExpr = TupleTypeExpr
context-free priorities
  TupleTypeExpr = TypeExpr "*" TupleTypeExpr >
  TypeExpr = TupleTypeExpr