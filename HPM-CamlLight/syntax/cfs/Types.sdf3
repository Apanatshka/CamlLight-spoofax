module cfs/Types

imports
	lex/Identifier

context-free start-symbols
	TypeExpr

syntax
	"'" <IDENT-CF> -> <TYPEVARIABLE-CF> {cons("TypeVar")} 

templates
	TypeExpr                = [[TYPEVARIABLE]]
	TypeExpr                = [([TypeExpr])] {bracket}
	TypeExpr.FuncType       = [[TypeExpr] -> [TypeExpr]] {right}
	TypeExpr.TupleType      = [[TupleTypeExpr]]
	TypeExpr.ConstrType     = [[TypeExprParams] [GLOBALNAME]]
	
	TypeExprParams.TypeExprParams = [[TypeExpr?]]
	TypeExprParams.TypeExprParams = [([TypeExpr+; separator=", "])]

context-free priorities
	TypeExpr.ConstrType >
    TypeExpr.TupleType  >
    TypeExpr.FuncType

  context-free syntax
    TypeExpr "*" TypeExpr      -> TupleTypeExpr {ast("[<1>,<2>]")}
    TypeExpr "*" TupleTypeExpr -> TupleTypeExpr {ast("<conc([<1>],<2>)>")}

  context-free priorities
  	TypeExpr "*" TypeExpr -> TupleTypeExpr >
    TupleTypeExpr -> TypeExpr
  context-free priorities
  	TypeExpr "*" TupleTypeExpr -> TupleTypeExpr >
    TupleTypeExpr -> TypeExpr