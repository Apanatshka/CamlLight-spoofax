module cfs/Definitions

imports
	lex/Identifier
	cfs/Types
	cfs/Expressions

context-free start-symbols
	TypeDef
	TypeDefPart
	TypeParams
	ConstrDecl
	LabelDecl
	ExcDef
	ValDef
	ValDecl

template options
	keyword -/- [A-Za-z0-9]

templates
	TypeDef.TypeDef          = [type [TypeDefPart+; separator="and"]]
	
	TypeDefPart.ADTDef       = [[TypeParams?] [IDENT] = [ConstrDecl+; separator="|"]]
	TypeDefPart.LabelDef     = [[TypeParams?] [IDENT] = {[LabelDecl+; separator=";"]}]
	TypeDefPart.TypeAlias    = [[TypeParams?] [IDENT] == [TypeExpr]]
	TypeDefPart.AbstrType    = [[TypeParams?] [IDENT]]
	TypeDefPart.MutAbstrType = [[TypeParams?] [IDENT] mutable]
	
	TypeParams.TypeParam     = [[TYPEVARIABLE]]
	TypeParams.TypeParams    = [([TYPEVARIABLE+; separator=","])]
	
	ConstrDecl.CConstrDecl   = [[IDENT]]
	ConstrDecl.NCConstrDecl  = [[IDENT] of [TypeExpr]]
	
	LabelDecl.LabelDecl      = [[IDENT] : [TypeExpr]]
	LabelDecl.MutLabelDecl   = [mutable [IDENT] : [TypeExpr]]
	
	ExcDef.ExcDef            = [exception [ConstrDecl+; separator="and"]]
	
	ValDef.ValDef            = [let [GlobalLetBind+; separator="and"]]
	ValDef.RecValueDef       = [let rec [GlobalRecLetBind+; separator="and"]]
	
	ValDecl.ValDecl          = [value [ValDeclPart+; separator="and"]]
	
	ValDeclPart.TypeBinding  = [[IDENT] : [TypeExpr]]