module cfs/Expressions

imports
	lex/Identifier
	lex/Number
	lex/Text
	cfs/Names
	cfs/Values
	cfs/Types
	cfs/Patterns

context-free start-symbols
	Expr

context-free syntax
	Expr "," Expr      -> TupleExpr {ast("[<1>,<2>]")}
	Expr "," TupleExpr -> TupleExpr {ast("<conc([<1>],<2>)>")}

template options
	keyword -/- [A-Za-z0-9]

templates
	ExprRecordBind.ExprRecordBind = [[GLOBALNAME] = [Expr]]
	
	FuncOrConstr = [[Expr]]
	FuncOrConstr = [[NCConstr]]
	
	//this is probably a mistake in the manual because it isn't explained and it's ambiguous with Variable
	// Expr.Ident               = [[IDENT]]
	// ambiguity with Constant is actually *wanted*
	Expr = [[Variable]]
	Expr = [[Constant]]
	Expr = [([Expr])] {bracket}
	Expr = [begin
	[Expr]
end] {bracket}
	Expr.HasType   = [([Expr]: [TypeExpr])]
	Expr.TupleExpr = [[TupleExpr]]
	// NCConstr pattern is ambiguous with function application. FuncApp is expanded and will be desugared later 
	// Expr.ConstrApp    = [[NCConstr] [Expr]]
	Expr.ListLit      = <[<Expr+; separator="; ">]>
	Expr.ArrayLit     = <[|<Expr+; separator="; ">|]>
	Expr.RecordExpr   = [{[ExprRecordBind+; separator="; "]}]
	Expr.FuncOrConstrApp = [[FuncOrConstr] [Expr]] {left}
	Expr.RecordAccess = [[Expr].[GLOBALNAME]]
	// <- may be read as Lt(Negate(...)), hence the prefer
	Expr.RecordAssign = [[Expr].[GLOBALNAME] <- [Expr]] {right, prefer}
	Expr.ArrayAccess  = [[Expr].([Expr])]
	// <- may be read as Lt(Negate(...)), hence the prefer
	Expr.ArrayAssign  = [[Expr].([Expr]) <- [Expr]] {right, prefer}
	// prefer so the dangling else is associated with the last if
	Expr.IfExpr       = [if [Expr] then [Expr]] {prefer}
	Expr.IfElseExpr   = [if [Expr] then [Expr] else [Expr]]
	Expr.WhileExpr    = [while [Expr] do [Expr] done]
	Expr.ForExpr      = [for [IDENT] = [ForRange] do [Expr] done]
	Expr.MatchExpr    = [match [Expr] with [SimpleMatch+; separator="\n| "]]
	Expr.MatchExpr    = [match [Expr] with | [SimpleMatch+; separator="\n| "]] // undocumented form found in example programs
	Expr.FunDef       = [fun [MultiMatch+; separator="\n| "]]
	Expr.FunDef       = [fun
	| [MultiMatch+; separator="\n| "]] // undocumented form found in example programs
	Expr.FunctionDef  = [function [SimpleMatch+; separator="\n| "]]
	Expr.FunctionDef  = [function
	| [SimpleMatch+; separator="\n| "]] // undocumented form found in example programs
	Expr.TryExpr      = [try [Expr] with [SimpleMatch+; separator="\n| "]]
	Expr.TryExpr      = [try [Expr] with
	| [SimpleMatch+; separator="\n| "]] // undocumented form found in example programs
	Expr.LetExpr      = [let [LetBind+; separator="\nand "] in [Expr]]
	Expr.LetRecExpr   = [let rec [LetRecBind+; separator="\nand "] in [Expr]]
	
	SimpleMatch.SimpleMatch = [[Pattern] -> [Expr]]
	MultiMatch.MultiMatch   = [[Pattern+; separator=" "] -> [Expr]]
	
	LetBind.LocalValDef               = [[Pattern] = [Expr]] // prefer the rule below over a ConstrPattern
	LetBind.LocalFunDef               = [[Variable] [Pattern+; separator=" "] = [Expr]] {prefer}
	LetRecBind.LocalRecValDef         = [[Pattern] = [Expr]] // prefer the rule below over a ConstrPattern
	LetRecBind.LocalRecFunDef         = [[Variable] [Pattern+; separator=" "] = [Expr]] {prefer}
	
	ForRange.RangeTo     = [[Expr] to [Expr]]
	ForRange.RangeDownTo = [[Expr] downto [Expr]]
	
	// avoid in favour of negative integer literals
	Expr.Negate  = [-[Expr]]  {avoid}
	Expr.NegateF = [-.[Expr]]
	Expr.Deref   = [![Expr]]
	Expr.Not     = [not [Expr]]
	
	Expr.ConsExpr = [[Expr] :: [Expr]] {right}
	Expr.And      = [[Expr] & [Expr]]  {left}
	Expr.Or       = [[Expr] or [Expr]] {left}
	Expr.ExprSeq  = [[Expr]; [Expr]]   {right}

	Expr.Add             = [[Expr] + [Expr]]   {left}
	// prefer over function application of negative number
	Expr.Sub        = [[Expr] - [Expr]]   {left, prefer}
	Expr.Mul        = [[Expr] * [Expr]]   {left}
	Expr.Div        = [[Expr] / [Expr]]   {left}
	Expr.Mod        = [[Expr] mod [Expr]] {left}
	Expr.AddF       = [[Expr] +. [Expr]]  {left}
	// prefer over function application of float negative number
	Expr.SubF       = [[Expr] -. [Expr]]  {left, prefer}
	Expr.MulF       = [[Expr] *. [Expr]]  {left}
	Expr.DivF       = [[Expr] /. [Expr]]  {left}
	Expr.PowF       = [[Expr] ** [Expr]]  {right}
	Expr.ListConc   = [[Expr] @ [Expr]]   {right}
	Expr.StringConc = [[Expr] ^ [Expr]]   {right}
	//this one isn't explained in the manual!
	//Expr.UndefinedOperator = [[Expr] ! [Expr]]
	Expr.RefAssign = [[Expr] := [Expr]]  {right}
	
	//avoid because = is also used in let and record bindings
	Expr.StructEq  = [[Expr] = [Expr]]   {left, avoid}
	Expr.StructNeq = [[Expr] <> [Expr]]  {left}
	Expr.PhyEq     = [[Expr] == [Expr]]  {left}  
	Expr.PhyNeq    = [[Expr] != [Expr]]  {left}  
	Expr.Lt        = [[Expr] < [Expr]]   {left}
	Expr.Leq       = [[Expr] <= [Expr]]  {left}
	Expr.Gt        = [[Expr] > [Expr]]   {left}
	Expr.Geq       = [[Expr] >= [Expr]]  {left}
	Expr.LtF       = [[Expr] <. [Expr]]  {left} 
	Expr.LeqF      = [[Expr] <=. [Expr]] {left}
	Expr.GtF       = [[Expr] >. [Expr]]  {left} 
	Expr.GeqF      = [[Expr] >=. [Expr]] {left}

context-free priorities
	Expr.Deref > {
		Expr.RecordAccess
		Expr.ArrayAccess
	} >
	Expr.FuncOrConstrApp >
	// Expr.ConstrApp > 
	{
		Expr.Negate
		Expr.NegateF
	} >
	Expr.PowF >
	Expr.Mod > {
		Expr.Mul
		Expr.MulF
		Expr.Div
		Expr.DivF
	} > {
		Expr.Add
		Expr.AddF
		Expr.Sub
		Expr.SubF
	} >
	Expr.ConsExpr > {
		Expr.ListConc
		Expr.StringConc
	} > {
		Expr.StructEq   
		Expr.StructNeq 
		Expr.PhyEq     
		Expr.PhyNeq   
		Expr.Lt           
		Expr.Leq   
		Expr.Gt        
		Expr.Geq
		Expr.LtF      
		Expr.LeqF   
		Expr.GtF        
		Expr.GeqF
	} >
	Expr.Not >
	Expr.And >
	Expr.Or >
	Expr.TupleExpr > {
		Expr.RecordAssign
		Expr.ArrayAssign
		Expr.RefAssign
	} > {
		Expr.IfExpr
		Expr.IfElseExpr
	} >
	Expr.ExprSeq > { // when looking at examples, this seems to be in the wrong order somehow
		Expr.LetExpr     
		Expr.LetRecExpr  
		Expr.MatchExpr   
		Expr.FunDef    
		Expr.FunctionDef 
		Expr.TryExpr     
	}

// disambiguation: Keep expression sequence from being considered inside list/array/record literals
context-free priorities
    { Expr -> {Expr ";"}+
      GLOBALNAME "=" Expr -> ExprRecordBinding } >
    Expr ";" Expr -> Expr

context-free priorities
	Expr "," Expr -> TupleExpr >
	TupleExpr -> Expr
context-free priorities
	Expr "," TupleExpr -> TupleExpr >
	TupleExpr -> Expr

// // These should preferably be generated because of the non-assoc annotation on Expr.TupleExpr, but that isn't the case right now. 
// context-free priorities
// 	Expr -> {Expr ","}+ >
// 	{Expr ","}+ -> Expr