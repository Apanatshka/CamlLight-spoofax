module cfs/Patterns

imports
	lex/Identifier
	cfs/Types
	cfs/Values

context-free start-symbols
	Pattern

template options
	tokenize: "[("
	keyword -/- [A-Za-z]

templates
	
	PatternRecordBinding.PatternRecordB = [[GLOBALNAME] = [Pattern]]
	
	Pattern = [[SimplePattern]]
	Pattern = [[TuplePattern]]
	
	// prefer over Constant
	SimplePattern.PatternVarOrConst = [[IDENT]] {prefer}
	SimplePattern                   = [[Constant]]
	SimplePattern.Wildcard          = [_]
	SimplePattern.Alias             = [[Pattern] as [IDENT]]
	SimplePattern                   = [([Pattern])] {bracket}
	SimplePattern.HasTypePattern    = [([Pattern] : [TypeExpr])]
	SimplePattern.PatternChoice     = [[Pattern] | [Pattern]] {left}
	SimplePattern.RecordPattern     = [{[PatternRecordBinding+; separator="; "]}]
	SimplePattern.ConstrPattern     = [[NCConstr] [SimplePattern]]
	// Already attained through PatternConstant
	// Pattern.EmptyListPattern     = <[]>
	SimplePattern.ListLitPattern    = <[<Pattern+; separator="; ">]>
	SimplePattern.ConsListPattern   = [[SimplePattern] :: [SimplePattern]] {right}
	TuplePattern.TuplePattern       = [[SimplePattern+; separator=", "]] // {avoid} // both this avoid and the reject below are required, or maybe the avoid isn't necessary?
	TuplePattern.TuplePattern       = [[SimplePattern]] {reject}
	
context-free priorities
	SimplePattern.ConstrPattern >
	SimplePattern.ConsListPattern >
	TuplePattern.TuplePattern >
	SimplePattern.PatternChoice >
	SimplePattern.Alias

