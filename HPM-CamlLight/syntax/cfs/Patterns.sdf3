module cfs/Patterns

imports
	lex/Identifier
	cfs/Types
	cfs/Values

context-free start-symbols
	Pattern

context-free syntax
    Pattern "," Pattern      -> TuplePattern {ast("[<1>,<2>]")}
    Pattern "," TuplePattern -> TuplePattern {ast("<conc([<1>],<2>)>")}

context-free priorities
    Pattern "," Pattern -> TuplePattern >
    TuplePattern -> Pattern
context-free priorities
    Pattern "," TuplePattern -> TuplePattern >
    TuplePattern -> Pattern

template options
	tokenize: "[("
	keyword -/- [A-Za-z]

templates
	
	PatternRecordBinding.PatternRecordBind = [[GlobalName] = [Pattern]]
	
	// ambiguity with Constant is actually *wanted*
	Pattern.PatternVar     = [[IDENT]]
	Pattern                = [[Constant]]
	Pattern.PatternWC      = [_]
	Pattern.PatternAlias   = [[Pattern] as [IDENT]]
	Pattern                = [([Pattern])] {bracket}
	Pattern.HasTypePattern = [([Pattern] : [TypeExpr])]
	Pattern.PatternChoice  = [[Pattern] | [Pattern]] {left}
	Pattern.RecordPattern  = [{[PatternRecordBinding+; separator="; "]}]
	Pattern.ConstrPattern  = [[NCConstr] [Pattern]]
	// Already attained through PatternConstant:
	// Pattern.EmptyListPattern     = <[]>
	Pattern.ListLitPattern    = <[<Pattern+; separator="; ">]>
	Pattern.ConsListPattern   = [[Pattern] :: [Pattern]] {right}
	Pattern.TuplePattern      = [[TuplePattern]]
	
context-free priorities
	Pattern.ConstrPattern   >
	Pattern.ConsListPattern >
	Pattern.TuplePattern    >
	Pattern.PatternChoice   >
	Pattern.PatternAlias
