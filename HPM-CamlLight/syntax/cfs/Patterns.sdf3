module cfs/Patterns

imports
  lex/Identifier
  cfs/Types
  cfs/Values

context-free start-symbols
  Pattern

context-free syntax
  TuplePattern = Pattern "," Pattern      {ast("[<1>,<2>]")}
  TuplePattern = Pattern "," TuplePattern {ast("<conc([<1>],<2>)>")}

context-free priorities
  TuplePattern = Pattern "," Pattern >
  Pattern = TuplePattern
context-free priorities
  TuplePattern = Pattern "," TuplePattern >
  Pattern = TuplePattern

template options
  tokenize: "[("
  keyword -/- [A-Za-z]

context-free syntax
  PatternRecordBinding.PatternRecordBind = [[GlobalName] = [Pattern]]
  
  // ambiguity with Constant is actually *wanted*
  Pattern.PatternVar     = [[IDENT]]
  Pattern                = [[Constant]]
  Pattern.PatternWC      = [_]
  Pattern.PatternAlias   = [[Pattern] as [IDENT]]
  Pattern                = [([Pattern])] {bracket}
  Pattern.HasTypePattern = [([Pattern] : [TypeExpr])]
  Pattern.PatternChoice  = [[Pattern] | [Pattern]] {left}
  Pattern.RecordPattern  = [{[{PatternRecordBinding "; "}+]}]
  Pattern.ConstrPattern  = [[NCConstr] [Pattern]]
  // Already attained through PatternConstant:
  // Pattern.EmptyListPattern     = <[]>
  Pattern.ListLitPattern    = <[<{Pattern "; "}+>]>
  Pattern.ConsListPattern   = [[Pattern] :: [Pattern]] {right}
  Pattern.TuplePattern      = [[TuplePattern]]
  
context-free priorities
  Pattern.ConstrPattern   >
  Pattern.ConsListPattern >
  Pattern.TuplePattern    >
  Pattern.PatternChoice   >
  Pattern.PatternAlias
